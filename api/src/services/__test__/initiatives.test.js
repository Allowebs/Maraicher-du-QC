import _ from 'lodash'
import { MethodNotAllowed, NotFound } from '@feathersjs/errors'

import app from '../../app'
import { truncateTestDatabase } from '../../../db/index'
import { initiativeData, insertInitiative } from './data/initiatives'
import { createTestUser } from './data/users'

// disable auth
jest.mock('../../hooks/authorization')
jest.mock('../../hooks/email')

describe('initiatives service', () => {
  const service = app.service('initiatives')

  const params = { provider: 'rest', headers: {}, query: {} }

  it('gets registered', () => {
    expect(service).toBeTruthy()
  })

  it('finds initiatives', async () => {
    const initiatives = await Promise.all(_.times(3, insertInitiative))

    const result = await service.find(params)
    expect(result.features).toHaveLength(3)
    initiatives.forEach(initiative => {
      // TODO toJSON is required to get the final representation generated by Objection
      // maybe it's preferrable to convert to GeoJSON in a hook instead, outside of
      // Objection?
      const feature = result.features.find(f => f.id === initiative.id).toJSON()
      expect(feature.properties.name).toEqual(initiative.name)
      expect(feature.properties.city).toEqual(initiative.city)
      expect(feature.geometry.coordinates[0]).toEqual(initiative.longitude)
      expect(feature.geometry.coordinates[1]).toEqual(initiative.latitude)
    })
  })

  it('gets a initiative', async () => {
    const initiative = await insertInitiative()

    const result = await service.get(initiative.id, params)

    expect(result).not.toBeNull()

    const feature = await result.toJSON()

    expect(feature.properties.name).toEqual(initiative.name)
    expect(feature.properties.city).toEqual(initiative.city)
    expect(feature.geometry.coordinates[0]).toEqual(initiative.longitude)
    expect(feature.geometry.coordinates[1]).toEqual(initiative.latitude)
    // TODO doesn't work in console??
    // expect(feature.properties.address).toEqual(initiative.address)
    // expect(feature.properties.description).toEqual(initiative.description)
    // expect(feature.properties.deliveryDays).toEqual(initiative.deliveryDays)
  })

  it('creates a initiative', async () => {
    params.user = await createTestUser(app.service('users'))

    const data = await initiativeData()

    const result = await service.create(data, params)

    // TODO shouldn't this return GeoJSON as well?
    expect(result.name).toEqual(data.name)
    expect(result.city).toEqual(data.city)
    expect(Number(result.longitude)).toEqual(data.longitude)
    expect(Number(result.latitude)).toEqual(data.latitude)
    // TODO doesn't work in console??
    // expect(result.address).toEqual(result.address)
    // expect(result.description).toEqual(data.description)
    // expect(result.deliveryDays).toEqual(data.deliveryDays)

  })
  it('patches a initiative', async () => {
    params.user = await createTestUser(app.service('users'))

    const testinitiative = await insertInitiative()
    const patch = await initiativeData()

    const result = await service.patch(testinitiative.id, patch, params)

    expect(result.name).toEqual(patch.name)
    expect(result.city).toEqual(patch.city)
    expect(Number(result.longitude)).toEqual(patch.longitude)
    expect(Number(result.latitude)).toEqual(patch.latitude)
    // TODO doesn't work in console??
    // expect(result.address).toEqual(patch.address)
    // expect(result.description).toEqual(patch.description)
    // expect(result.deliveryDays).toEqual(patch.deliveryDays)

  })

  it('disallows update', async () => {
    await expect(service.update(1, {}, params)).rejects.toThrow(
      MethodNotAllowed
    )
  })

  it('removes a initiative', async () => {
    params.user = await createTestUser(app.service('users'))

    const testinitiative = await insertInitiative()

    const result = await service.remove(testinitiative.id, params)
    expect(result.name).toEqual(testinitiative.name)
    expect(result.city).toEqual(testinitiative.city)
    expect(Number(result.longitude)).toEqual(testinitiative.longitude)
    expect(Number(result.latitude)).toEqual(testinitiative.latitude)
    // TODO doesn't work in console??
    // expect(result.address).toEqual(testinitiative.address)
    // expect(result.description).toEqual(testinitiative.description)
    // expect(result.deliveryDays).toEqual(testinitiative.deliveryDays)

    await expect(service.get(testinitiative.id, params)).rejects.toThrow(NotFound)

  })

  afterEach(async () => truncateTestDatabase())
})
